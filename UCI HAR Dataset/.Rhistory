find.package("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
swirl()
swirl
swirl()
library(swirl)
swirl()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
getpwd()
getwd()
list.files("spectra"")
0
q
bye
bye()
quit
q()
list.files(specdata)
q()
;
escape
list.files(specdata)
list.files("specdata"")
list.files(specdata)
pollutantmean("specdata", "sulfate", 1)
library.swirl()
swirl()
library("swirl")
swirl()
pollutantmean("specdata", "sulfate", 1:10)
source("pollutant.r")
source("pollutantmean.r")
pollutantmean("specdata", "sulfate", 1:10)
}
data = c(data, newRead[[pollutant]])
# }
source("pollutantmean.r")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1)
for(i in id)
1
pollutantmean("specdata", "sulfate", 1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1)
pollutantmean("specdata", "sulfate", 1:10)
}
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R')
getwd()
setwd("~/")
getwd()
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R')
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R')
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R', echo=TRUE)
getwd()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
}
pollutantmean("specdata", "nitrate", 23)
}
complete("specdata", c(2, 4, 8, 10, 12))
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
for (i in id) {
source("complete.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
source("complete.R")
getwd()
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
source("complete.R"")
source(complete.R)
source("complete.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
complete("specdata", 30:25)
list.files("specdata")
}
source("corr.R")
source("corr.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/corr.R', echo=TRUE)
source("corr.R")
source("corr.R")
source("complete.R")
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 100)
head(cr)
?numeric
summary(cr)
?head
cr <- corr("specdata", 100)
head(cr)
cr <- corr("specdata", 1000)
head(cr)
cor?
?cor
source("corr.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/corr.R', echo=TRUE)
source("complete.R")
source("complete.R")
source("pollutantmean.R")
source("complete.R")
complete(specdata, 1)
complete("specdata", 1)
cr <- corr("specdata", 1000)
head(cr)
cr <- corr("specdata", 1000)
head(cr)
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/corr.R', echo=TRUE)
source("complete.R")
source("complete.R")
complete("specdata", 1)
source("specdata")
source(directory)
source("pollutantmean.R")
pollutantmean("specdata",sulphate,1)
pollutantmean("specdata",sulfate,1)
pollutantmean("specdata","sulfate",1)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1)
pollutantmean("specdata","nitrate",1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 23)
## Caching the Inverse of a Matrix
source("ProgrammingAssignment2/cachematrix.R")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
my_matrix<-makeCacheMatrix(matrix (1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
my_matrix<-makeCacheMatrix(matrix (1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
my_matrix<-makeCacheMatrix(matrix (1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix<-makeCacheMatrix(matrix (2, 2, 1, 4), 2, 2))
my_matrix<-makeCacheMatrix(matrix (2, 2, 1, 4), 2, 2)
my_matrix<-makeCacheMatrix(c(2, 2, 1, 4), 2, 2)
my_matrix<-makeCacheMatrix(matrix c(2, 2, 1, 4), 2, 2)
my_matrix$set(matrix c(2, 2, 1, 4), 2, 2))
my_matrix$set(matrix (c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
set.seed(1)
rpois(5,2)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
outcome<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source(outcome-of-care-measures.csv)
source("outcome-of-care-measures.csv")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
## Caching the Inverse of a Matrix
source("outcome-of-care-measures.csv")
setwd("C:/Users/i50096/rprog_data_ProgAssignment3-data")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source("outcome-of-care-measures.csv")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
outcome<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[,11])
}
{
best <- function(state, outcome)
source(best.r)
source("best.r")
}
source("best.r")
data.state <- data[data$State == state, ]
source("best.r")
best("TX", "heart attack")
best("MD", "heart attack")
best("BB", "heart attack")
best("NY", "heart attack")
best("NY", "hert attack")
}
source("rankhospital.r")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("best.r")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source("rankhospital.r")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source("rankall.r")
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
getwd()
source('C:/Users/i50096/rprog_data_ProgAssignment3-data/rankall.r', echo=TRUE)
getws()
getwd()
setwd("~/")
setwd("~/")
getwd()
fileurl <-  "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url=fileurl,destfile="idaho_housing.csv", mode =  "w", method="curl")
list.files(".")
download.file(url=fileUrl,destfile="idaho_housing.csv", mode =  "w", method="curl")
download.file(url=fileUrl,destfile="idaho_housing.csv", mode ="w", method="curl")
getwd()
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
head(idaho_h, 2)
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
source('C:/Users/i50096/rprog_data_ProgAssignment3-data/rankall.r', echo=TRUE)
getwd()
idaho_h  <- read.csv("getdata_data_ss06hid.xls")
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
library(plyr)
ucidirectory <- "UCI\ HAR\ Dataset"
x_test_f <- paste(ucidirectory , "/test/X_test.txt", sep = "")
y_test_f <- paste(ucidirectory , "/test/y_test.txt", sep = "")
subject_test_f <- paste(ucidirectory , "/test/subject_test.txt", sep = "")
x_train_f <- paste(ucidirectory , "/train/X_train.txt", sep = "")
y_train_f <- paste(ucidirectory , "/train/y_train.txt", sep = "")
subject_train_f <- paste(ucidirectory , "/train/subject_train.txt", sep = "")
x_train <- read.table(x_train_f)
y_train <- read.table(y_train_f)
subject_train <- read.table(subject_train_f)
x_test <- read.table(x_test_f)
y_test <- read.table(y_test_f)
subject_test <- read.table(subject_test_f)
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset")
ucidirectory <- "UCI\ HAR\ Dataset"
x_test_f <- paste(ucidirectory , "/test/X_test.txt", sep = "")
y_test_f <- paste(ucidirectory , "/test/y_test.txt", sep = "")
subject_test_f <- paste(ucidirectory , "/test/subject_test.txt", sep = "")
x_train_f <- paste(ucidirectory , "/train/X_train.txt", sep = "")
y_train_f <- paste(ucidirectory , "/train/y_train.txt", sep = "")
subject_train_f <- paste(ucidirectory , "/train/subject_train.txt", sep = "")
x_train <- read.table(x_train_f)
y_train <- read.table(y_train_f)
subject_train <- read.table(subject_train_f)
x_test <- read.table(x_test_f)
y_test <- read.table(y_test_f)
subject_test <- read.table(subject_test_f)
xmerge <- rbind(x_train, x_test)
ymerge <- rbind(y_train, y_test)
subjectmerge <- rbind(subject_train, subject_test)
features <- read.table('./UCI HAR Dataset/features.txt')
head(features)
mean.sd <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
x.mean.sd <- x[, mean.sd]
mean.sd <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
x.mean.sd <- xmerge[, mean.sd]
mean_sd <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
xmean_sd <- xmerge[, mean.sd]
head(xmean_sd)
names(xmean_sd) <- features[mean_sd, 2]
names(xmean_sd) <- tolower(names(xmean_sd))
names(xmean_sd) <- gsub("\\(|\\)", "", names(xmean_sd))
activities <- read.table('./UCI HAR Dataset/activity_labels.txt')
activities[, 2] <- tolower(as.character(activities[, 2]))
activities[, 2] <- gsub("_", "", activities[, 2])
ymerge[, 1] = activities[y[, 1], 2]
colnames(ymerge) <- 'activity'
colnames(subjectmerge) <- 'subject'
ymerge[, 1] = activities[ymerge[, 1], 2]
colnames(ymerge) <- 'activity'
colnames(subjectmerge) <- 'subject'
head(ymerge)
head(subjectmerge)
head(data)
finaldata <- cbind(subjectmerge, xmean_sd, ymerge)
str(finaldata)
write.table(finaldata, './Project/merged.txt', row.names = F)
head(finaldata)
averageactivity <- aggregate(x=finaldata, by=list(activities=finaldata$activity, subj=finaldata$subject), FUN=mean)
averageactivity <- averageactivity[, !(colnames(averageactivity) %in% c("subj", "activity"))]
str(averageactivity)
write.table(averageactivity, './Project/average.txt', row.names = F)
write.table(averageactivity, 'average.txt', row.names = F)
library(knitr)
knit("makeCodebook.Rmd", output = "codebook.md", encoding = "ISO8859-1", quiet = TRUE)
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
getwd()
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset/train")
y_test <- read.table(y_test_f)
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset/test")
subject_test <- read.table(subject_test_f)
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset/test")
x_test <- read.table(x_test_f)
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/i50096/GettingAndCleaningData/Project/UCI HAR Dataset")
getwd()
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
## Assignment: Getting and Cleaning Data Course Project
## features<- read.table("features.txt", sep = "")
## necessary packages
library(plyr)
## Load all the files
ucidirectory <- "UCI\ HAR\ Dataset"
x_test_f <- paste(ucidirectory , "/test/X_test.txt", sep = "")
y_test_f <- paste(ucidirectory , "/test/y_test.txt", sep = "")
subject_test_f <- paste(ucidirectory , "/test/subject_test.txt", sep = "")
x_train_f <- paste(ucidirectory , "/train/X_train.txt", sep = "")
y_train_f <- paste(ucidirectory , "/train/y_train.txt", sep = "")
subject_train_f <- paste(ucidirectory , "/train/subject_train.txt", sep = "")
## read all the files
x_train <- read.table(x_train_f)
y_train <- read.table(y_train_f)
subject_train <- read.table(subject_train_f)
x_test <- read.table(x_test_f)
y_test <- read.table(y_test_f)
subject_test <- read.table(subject_test_f)
# Merge the training and the test sets to create one data set.
xmerge <- rbind(x_train, x_test)
ymerge <- rbind(y_train, y_test)
subjectmerge <- rbind(subject_train, subject_test)
## Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table('./UCI HAR Dataset/features.txt')
mean_sd <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
xmean_sd <- xmerge[, mean.sd]
## Uses descriptive activity names to name the activities in the data set
names(xmean_sd) <- features[mean_sd, 2]
names(xmean_sd) <- tolower(names(xmean_sd))
names(xmean_sd) <- gsub("\\(|\\)", "", names(xmean_sd))
activities <- read.table('./UCI HAR Dataset/activity_labels.txt')
activities[, 2] <- tolower(as.character(activities[, 2]))
activities[, 2] <- gsub("_", "", activities[, 2])
ymerge[, 1] = activities[ymerge[, 1], 2]
colnames(ymerge) <- 'activity'
colnames(subjectmerge) <- 'subject'
## Appropriately labels the data set with descriptive variable names.
finaldata <- cbind(subjectmerge, xmean_sd, ymerge)
#str(finaldata)
#write.table(finaldata, 'merged.txt', row.names = F)
## From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
averageactivity <- aggregate(x=finaldata, by=list(activities=finaldata$activity, subj=finaldata$subject), FUN=mean)
averageactivity <- averageactivity[, !(colnames(averageactivity) %in% c("subj", "activity"))]
str(averageactivity)
write.table(averageactivity, 'average.txt', row.names = F)
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
